//
// Created by birdpeople on 9/13/2023.
//
#include "segment_mesh_writer.h"
#include <thrust/host_vector.h>

namespace culbvh {

    template<typename T>
    void SegmentMeshWriter<T>::download() {
        if (!m_edge || !m_point) {
            std::cout << "Error: No data to write - edge or point data is null" << std::endl;
            return;
        }

        // Copy device data to host
        thrust::host_vector<edge_type> edge_host(*m_edge);
        thrust::host_vector<point_type> point_host(*m_point);

        std::ofstream file;
        std::string name = m_prefix + "_" + std::to_string(m_frame) + ".obj";
        file.open(m_path + name);
        
        if (!file.is_open()) {
            std::cout << "Error: Could not open file for writing: " << m_path + name << std::endl;
            return;
        }

        // Write OBJ header
        file << "####" << std::endl
             << "# OBJ File Generated by Segment Mesh Writer" << std::endl
             << "# Object " << name << std::endl
             << "#" << std::endl
             << "# Vertices: " << point_host.size() << std::endl
             << "# Segments: " << edge_host.size() << std::endl
             << "#" << std::endl
             << "####" << std::endl;

        // Write vertices
        for (size_t i = 0; i < point_host.size(); i++) {
            const auto& point = point_host[i];
            file << "v " << point.x << " " << point.y << " " << point.z << std::endl;
        }
        file << "# " << point_host.size() << " vertices, 0 vertex normals" << std::endl;

        // Write line segments
        for (size_t i = 0; i < edge_host.size(); i++) {
            const auto& edge = edge_host[i];
            // OBJ format uses 1-based indexing
            file << "l " << edge.x + 1 << " " << edge.y + 1 << std::endl;
        }

        file << "# " << edge_host.size() << " lines, 0 texture coordinates"
             << std::endl << "# End of File" << std::endl;

        file.close();
        m_frame++;
        std::cout << "Successfully wrote mesh to: " << m_path + name << std::endl;
    }

    // Explicit template instantiations
    template class SegmentMeshWriter<float>;

}